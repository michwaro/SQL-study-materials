
Creating tables
When you have new entities and relationships to store in your database, you can create a new database table using the CREATE TABLE statement.

Create table statement w/ optional table constraint and default value
CREATE TABLE IF NOT EXISTS mytable (
    column DataType TableConstraint DEFAULT default_value,
    another_column DataType TableConstraint DEFAULT default_value,
    ‚Ä¶
);
The structure of the new table is defined by its table schema, which defines a series of columns. Each column has a 
name, the type of data allowed in that column, an optional table constraint on values being inserted, and an optional default value.

If there already exists a table with the same name, the SQL implementation will usually throw an error, so to suppress 
the error and skip creating a table if one exists, you can use the IF NOT EXISTS clause.

Table data types
Different databases support different data types, but the common types support numeric, string, and other miscellaneous 
things like dates, booleans, or even binary data. Here are some examples that you might use in real code.

Data type	Description
INTEGER, BOOLEAN	The integer datatypes can store whole integer values like the count of a number or an age. In some 
implementations, the boolean value is just represented as an integer value of just 0 or 1.
FLOAT, DOUBLE, REAL	The floating point datatypes can store more precise numerical data like measurements or fractional 
values. Different types can be used depending on the floating point precision required for that value.
CHARACTER(num_chars), VARCHAR(num_chars), TEXT	
The text based datatypes can store strings and text in all sorts of locales. The distinction between the various types 
generally amount to underlaying efficiency of the database when working with these columns.

Both the CHARACTER and VARCHAR (variable character) types are specified with the max number of characters that they can 
store (longer values may be truncated), so can be more efficient to store and query with big tables.

DATE, DATETIME	SQL can also store date and time stamps to keep track of time series and event data. They can be tricky 
to work with especially when manipulating data across timezones.
BLOB	Finally, SQL can store binary data in blobs right in the database. These values are often opaque to the database, 
so you usually have to store them with the right metadata to requery them.
Docs: MySQL, Postgres, SQLite, Microsoft SQL Server
Table constraints
We aren't going to dive too deep into table constraints in this lesson, but each column can have additional table constraints 
on it which limit what values can be inserted into that column. This is not a comprehensive list, but will show a few common 
constraints that you might find useful.

Constraint		- Description
PRIMARY KEY	  	- This means that the values in this column are unique, and each value can be used to identify a single 
				  row in this table.
AUTOINCREMENT	- For integer values, this means that the value is automatically filled in and incremented with each row 
				  insertion. Not supported in all databases.
UNIQUE			- This means that the values in this column have to be unique, so you can't insert another row with the 
				  same value in this column as another row in the table. Differs from the `PRIMARY KEY` in that it doesn't 
                  have to be a key for a row in the table.
NOT NULL		- This means that the inserted value can not be `NULL`.
CHECK (expression)	- This allows you to run a more complex expression to test whether the values inserted are valid. 
				      For example, you can check that values are positive, or greater than a specific size, or start with 
                      a certain prefix, etc.
FOREIGN KEY		- This is a consistency check which ensures that each value in this column corresponds to another value 
				  in a column in another table.

For example, if there are two tables, one listing all Employees by ID, and another listing their payroll information, 
the `FOREIGN KEY` can ensure that every row in the payroll table corresponds to a valid employee in the master Employee list.

An example
Here's an example schema for the Movies table that we've been using in the lessons up to now.

Movies table schema
CREATE TABLE movies (
    id INTEGER PRIMARY KEY,
    title TEXT,
    director TEXT,
    year INTEGER, 
    length_minutes INTEGER
);

‚úÖ Basic Syntax for Creating a Table

CREATE TABLE table_name (
	column1 datatype constraints,
    column2 datatype constraints,
    ...
);

üìò Example from Your File: employee_demographics

CREATE TABLE IF NOT EXISTS employee_demographics (
	employee_id INT NOT NULL,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    age INT,
    gender VARCHAR(50),
    birth_date DATE,
    PRIMARY KEY (employee_id)
);

üîç Explanation:
employee_id INT NOT NULL: An integer column that cannot be null.
VARCHAR(50): A variable-length string up to 50 characters.
DATE: Stores a date (e.g., '1980-01-01').
PRIMARY KEY (employee_id): Ensures each employee_id is unique and not null.

üìò Another Example: parks_departments

CREATE TABLE parks_departments (
	department_id INT NOT NULL AUTO_INCREMENT,
    department_name VARCHAR(50),
    PRIMARY KEY (department_id)
);

üîç Explanation:
AUTO_INCREMENT: Automatically increases the value for each new row.
NOT NULL: Ensures the column must have a value.
PRIMARY KEY: Uniquely identifies each department.

üß† Common Data Types
Data Type		- Description
INT				- Integer numbers
VARCHAR(n)		- Variable-length string (max n chars)
DATE			- Date values
DECIMAL(x,y)	- Fixed-point numbers
BOOLEAN			- True/False values

üîê Common Constraints
Constraint		- Purpose
PRIMARY KEY		- Uniquely identifies each row
NOT NULL		- Prevents null values
UNIQUE			- Ensures all values in a column are unique
DEFAULT			- Sets a default value
AUTO_INCREMENT	- Automatically increases numeric values
FOREIGN KEY		- Links to a primary key in another table

üîó Creating Relationships with FOREIGN KEY
Let‚Äôs say you want to link employee_salary.dept_id to parks_departments.department_id:

CREATE TABLE employee_salary (
	employee_id INT NOT NULL,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    occupation VARCHAR(50),
    salary INT,
    dept_id INT,
    FOREIGN KEY (dept_id) REFERENCES parks_department(department_id)
);

This ensures that dept_id in employee_salary must match an existing department_id in parks_departments.

